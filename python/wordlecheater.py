# -*- coding: utf-8 -*-
"""wordleCheater.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kz5-aSyvkofYk8SKEe_kgSyJEUy3vCuD

# Lab 10 - Cheat at Wordle

https://www.nytimes.com/games/wordle/index.html

Wordle was all the rage in early 2022.  The game is a small twist on the classic board game Mastermind.  Before working on this lab, make sure you are familiar with Wordle.  It is free to play and the link is above.

I like games, but I am not above using programming to cheat!  In this lab, we will create a few functions that will help us solve the daily Wordle puzzel.

#Word list

The daily wordle puzzle is generated from a set word list.  I have what I beleive is the correct list.  The function below is complete.  Pass the url to a word list url and the function returns all the words in a List.
"""

from urllib.request import urlopen

'''
Read data from the given URL and load each line into a list.
'''
def urlToWordList(url):

  # words read from file
  words = []

  # open the given url
  data = urlopen(url)

  # read each line of the data, convert to a string and remove the last char (line feed)
  for line in data:
    words.append(line.decode('utf-8')[:-1]) 

  # return all the words read from the url
  return words

"""#Set

Documentation: https://www.w3schools.com/python/python_sets.asp

A Set is a lot like a list.  It differs in that each item must be unique, it is unordered, and immutable (you can't add or remove values).  One big value of a set is that are some unique operators.  For example, intersection.  Intersection returns all the items that exist in two sets.
"""

# change a string into a set
string = "this is a test"
mySet = set(string)
print(mySet)

# intersection of two sets
className = "Introduction to Python"
classNameSet = set(className)

letters = "donxzw"
letterSet = set(letters)

intersect = classNameSet.intersection(letterSet)
print(f"letters in both : {intersect}")

"""# Known letters

Wordle tells us if a guessed letter is in the solution.  Use this information to limit the words list to possible solutions. 
"""

'''
Returns all the words from the *wordList* that contain
all the letters in *letters*.  Order is not considered.

params:
  wordList : List : all possible words
  letters : String : letter known to exist in the solution
'''
def wordsContainingLetters(wordList, letters):

  possibleWords = []
  #Make letters into a set.
  letterSet=set(letters)
  i=0
  #Loop through the wordList and make that word into a set.
  for words in wordList:
    wordSet=set(words)
    #Get the intersect of the two sets.
    intersect= wordSet.intersection(letterSet)
    #If the intersect length is the same as the letters' length, add word to wordList.
    if len(intersect)==len(letters):
      possibleWords.insert(i,words)
      i+=1


  # convert the letters into a set
  # YOUR CODE

  # loop through each word in wordList, convert it into a set
  # then get the intersection.  If the number of items in the
  # intersectino is the same as the number of letters then add 
  # to the possibleWord list
  # YOUR CODE
    
  return possibleWords



# TESTS START -------------------------------------------------------------------
def test_wordsContainingLetters(wordList, letters, expected_result):
  if wordsContainingLetters(wordList, letters) == expected_result:
    print("游릭")
  else:
    print("游댮")


test_wordsContainingLetters(["beast", "colon", "mayor"], "bt", ["beast"])
test_wordsContainingLetters(["beast", "colon", "mayor"], "xyz", [])
test_wordsContainingLetters(["beast", "colon", "mayor"], "o", ["colon", "mayor"])
# TESTS END ---------------------------------------------------------------------

"""# Invalid letters

Wordle tells us when a guessed letter does not exist in the word.  This information helps us further limit the possible solutions.  Create a function that takes a list of words and returns from that list only the words that don't contain any of the letters in the given list of letters.

This code is very simliar to wordsContainingLetters.

Example:
```
print(wordsExcludingLetters(["beast", "colon", "mayor"], "om"))
>> ["beast"]
```


"""

'''
Return a list of words that do not contain the given letters.

Params:
  wordList : List : all possible words
  letters : String : letters known to NOT exist in the solution
'''
def wordsExcludingLetters(wordList, letters):

  possibleWords = []
  #Make letters into a set.
  letterSet=set(letters)
  i=0
  #Loop through word list turning each word into a set.
  for words in wordList:
    wordSet=set(words)
    #Find the intersection.
    intersect= wordSet.intersection(letterSet)
    #If length of intersect is equal to 0, add it to the posible words.
    if len(intersect)==0:
      possibleWords.insert(i,words)
      i+=1
  # convert the letters into a set
  # YOUR CODE

  # loop through each word in wordList, convert it into a set
  # then get the intersection.  If the number of items in the
  # intersectino is greater than zero, then add the word to the 
  # possibleWords list
  # YOUR CODE
    
  return possibleWords



# TESTS START -------------------------------------------------------------------
def test_wordsExcludingLetters(wordList, letters, expected_result):
  if wordsExcludingLetters(wordList, letters) == expected_result:
    print("游릭")
  else:
    print("游댮")


test_wordsExcludingLetters(["beast", "colon", "mayor"], "om", ["beast"])
test_wordsExcludingLetters(["beast", "colon", "mayor"], "bo", [])
test_wordsExcludingLetters(["beast", "colon", "mayor"], "be", ["colon", "mayor"])
# TESTS END ---------------------------------------------------------------------

"""# Pattern Matching

When a letter is in the correct position, wordle tells us.  That information is critical to narrowing down the possible solutions.

Create a function that, given a list of words, returns only those words where specific letters are in specific location.  We will supply that information by putting a period (.) in the locations we don't know about and a letter where we know.

For example, if we know the first letter is a 'b' and the thirst letter is an 'a' our pattern would be 'b.a..'.

This problem is a bit more complex, so we will break it down into two parts.  A function that takes a word and a pattern returning true if the word matches the pattern, false otherwise.  The second function will loop through a list of words and check each one for the pattern returning all the words matching the pattern.
"""

def wordMatchesPattern(word, pattern):

  # Make sure the word and pattern are the same size
  if len(word) != len(pattern):
    return False
  #Loop through the word.
  for i in range(len(word)):
    #If char at patter location i is a '.'.
    if pattern[i]!='.':
      #If word at i and pattern at i are not equal return false.
      if word[i]!=pattern[i]:
        return False
    i+=1
  # look through all the letters
  # if the character in pattern[i] is not a .
  # then check to see if it matches the letter
  # in the same place in word, if it does not
  # return False
  # YOUR CODE
  
  # all letter checks passed, return True
  return True


def wordsMatchingPattern(wordList, pattern):

  matchingWords = []
  i=0
  #Loop through wordList.
  for word in wordList:
    #Check if word matches pattern.
    if wordMatchesPattern(word,pattern):
      #If so add word to matchingWords list.
      matchingWords.insert(i,word)
      i+=1
  # loop through each word and test to see if it matches teh pattern
  # if it does, add to the matchingWords list

  return matchingWords



# TESTS START -------------------------------------------------------------------
def test_wordMatchesPattern(wordList, pattern, expected_result):
  if wordMatchesPattern(wordList, pattern) == expected_result:
    print("游릭")
  else:
    print("游댮")


test_wordMatchesPattern("beast", "b.a..", True)
test_wordMatchesPattern("beast", ".....", True)
test_wordMatchesPattern("beast", "t.a..", False)


def test_wordsMatchingPattern(wordList, pattern, expected_result):
  if wordsMatchingPattern(wordList, pattern) == expected_result:
    print("游릭")
  else:
    print("游댮")


test_wordsMatchingPattern(["beast", "colon", "mayor"], "...o.", ["colon", "mayor"])
test_wordsMatchingPattern(["beast", "colon", "mayor"], "z...a", [])
test_wordsMatchingPattern(["beast", "colon", "mayor"], "be...", ["beast"])
test_wordsMatchingPattern(["beast", "colon", "mayor"], ".....", ["beast", "colon", "mayor"])
# TESTS END ---------------------------------------------------------------------

"""# Load word list

Use the given function to load the word list I posted online.
"""

# get the word list
url = "https://firebasestorage.googleapis.com/v0/b/allowance-b457c.appspot.com/o/wordle.txt?alt=media&token=e6c5bb59-a340-40ae-86d8-94d2b06ac1fd"
words = urlToWordList(url)

"""# Putting it all together

Assemble the functions we created to make a wordle helper.
"""

def wordleHelper(fullWordList, knownLetters, invalidLetters, letterPattern):

  # STEP 1 - limit the full list to only the words that contain
  # all the known letters
  possibleWords = wordsContainingLetters(fullWordList, knownLetters)

  # STEP 2 - remove words with known invalid letters
  possibleWords = wordsExcludingLetters(possibleWords, invalidLetters)

  # STEP 3 - limit to words matching patttern of know letter locations
  possibleWords = wordsMatchingPattern(possibleWords, letterPattern)

  return possibleWords

"""# Cheating time!

Wordle only gives you one game a day.  This site is a clone of the game and you can play as much as you want:

https://www.devangthakkar.com/wordle_archive/?1
"""

print(wordleHelper(fullWordList=words, knownLetters="bet", invalidLetters="asdi", letterPattern=".eb.t"))